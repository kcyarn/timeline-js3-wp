<?php

/**
  * Plugin Name:      Timeline JS3 for Wordpress
 * Plugin URI:        https://github.com/kcyarn
 * Description:       Create event timelines inside Wordpress.
 * Version:           0.9
 * Author:            K. Chester
 * Author URI:        http://kristlechester.tumblr.com/
 * License:           GPL-2.0+
 * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt
 * Text Domain:       timeline_js3_wp
 */

function timeline_js3_wp_activation() {
}
register_activation_hook(__FILE__, 'timeline_js3_wp_activation');
function timeline_js3_wp_deactivation() {
}
register_deactivation_hook(__FILE__, 'timeline_js3_wp_deactivation');

add_action('wp_enqueue_scripts', 'timeline_js3_wp_scripts');
function timeline_js3_wp_scripts() {

	wp_register_script('timeline_js3_wp-embed', plugins_url('js/timelinejs3/timeline-min.js', __FILE__));
	wp_enqueue_script('timeline_js3_wp-embed');
	
	$timeline_array = array(
			'json_url' => plugins_url('json/timelinejs3_json.php', __FILE__),
	);

	wp_register_script('create-timeline', plugins_url('js/create-timeline.js', __FILE__));
	// Localize the timeline json
	wp_enqueue_script('create-timeline');
	wp_localize_script( 'create-timeline', 'timeline_vars', $timeline_array );


}

add_action('wp_enqueue_scripts', 'timeline_js3_wp_styles');
function timeline_js3_wp_styles() {

	wp_register_style('timeline_js3_wp_css', plugins_url('css/timelinejs3/timeline.css', __FILE__));
	wp_enqueue_style('timeline_js3_wp_css');
	wp_register_style('timeline_js3_wp_custom_css', plugins_url('css/timelinejs3/custom_timelinejs3.css', __FILE__));
	wp_enqueue_style('timeline_js3_wp_custom_css');
}

// Register Custom event type.
function custom_event_type() {

	$labels = array(
			'name'                => _x( 'Timeline Events', 'Post Type General Name', 'text_domain' ),
			'singular_name'       => _x( 'Event', 'Post Type Singular Name', 'text_domain' ),
			'menu_name'           => __( 'Timeline', 'text_domain' ),
			'name_admin_bar'      => __( 'Event', 'text_domain' ),
			'parent_item_colon'   => __( 'Event Parent:', 'text_domain' ),
			'all_items'           => __( 'All Events', 'text_domain' ),
			'add_new_item'        => __( 'Add New Event', 'text_domain' ),
			'add_new'             => __( 'Add New', 'text_domain' ),
			'new_item'            => __( 'New Event', 'text_domain' ),
			'edit_item'           => __( 'Edit Event', 'text_domain' ),
			'update_item'         => __( 'Update Event', 'text_domain' ),
			'view_item'           => __( 'View Event', 'text_domain' ),
			'search_items'        => __( 'Search Event', 'text_domain' ),
			'not_found'           => __( 'Not found', 'text_domain' ),
			'not_found_in_trash'  => __( 'Not found in Trash', 'text_domain' ),
			'menu_icon'           => 'dashicons-portfolio',
				
	);
	$args = array(
			'label'               => __( 'event_type', 'text_domain' ),
			'description'         => __( 'Add a new event to the timeline.', 'text_domain' ),
			'labels'              => $labels,
			'supports'            => array( 'title', 'editor', 'thumbnail',),
			'taxonomies'          => array( 'category', 'post_tag' ),
			'hierarchical'        => false,
			'public'              => true,
			'show_ui'             => true,
			'show_in_menu'        => true,
			'menu_position'       => 5,
			'show_in_admin_bar'   => true,
			'show_in_nav_menus'   => true,
			'can_export'          => true,
			'has_archive'         => true,
			'exclude_from_search' => false,
			'publicly_queryable'  => true,
			'capability_type'     => 'post',
			'menu_icon'			=> 'dashicons-calendar',
	);
	register_post_type( 'event_type', $args );

}

/**
 * Generated by the WordPress Meta Box generator
 * at http://jeremyhixon.com/wp-tools/meta-box/
 */

function event_dates_get_meta( $value ) {
	global $post;

	$field = get_post_meta( $post->ID, $value, true );
	if ( ! empty( $field ) ) {
		return is_array( $field ) ? stripslashes_deep( $field ) : stripslashes( wp_kses_decode_entities( $field ) );
	} else {
		return false;
	}
}

function event_dates_add_meta_box() {
	add_meta_box(
			'event_dates-event-dates',
			__( 'Event Dates', 'event_dates' ),
			'event_dates_event_dates_html',
			'event_type',
			'normal',
			'default'
	);
	add_meta_box(
			'event_dates-event-dates',
			__( 'Event Dates', 'event_dates' ),
			'event_dates_event_dates_html',
			'era_type',
			'normal',
			'default'
	);
}
add_action( 'add_meta_boxes', 'event_dates_add_meta_box' );

function event_dates_event_dates_html( $post) {
	wp_nonce_field( '_event_dates_event_dates_nonce', 'event_dates_event_dates_nonce' ); ?>
    
	<p>Input the start and end date for the event. If the event does not span multiple days, only enter the start date. Note: Timeline JS precedes BCE years with -. Anytime picker works for all dates prior to 9999 BC.</p>
	<table> 
		<tr>
		<th class="metabox_label_column">
            <label for="event_start_date"><?php _e( 'Start Date', 'event_dates' ); ?></label>
        </th>
        <th class="metabox_label_column">
           <label for="event_end_date"><?php _e( 'End Date', 'event_dates' ); ?></label>
        </th>
		</tr>
		<tr>
		<td><input type="text" name="event_start_date" id="event_start_date" value="<?php echo event_dates_get_meta( 'event_start_date' ); ?>" /></td>
		<td><input type="text" name="event_end_date" id="event_end_date" value="<?php echo event_dates_get_meta( 'event_end_date' ); ?>" /></td>
		</tr>
	</table>
<?php
}

function event_dates_event_dates_save( $post_id ) {
	if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) return;
	if ( ! isset( $_POST['event_dates_event_dates_nonce'] ) || ! wp_verify_nonce( $_POST['event_dates_event_dates_nonce'], '_event_dates_event_dates_nonce' ) ) return;
	if ( ! current_user_can( 'edit_post' ) ) return;

	if ( isset( $_POST['event_start_date'] ) )
		update_post_meta( $post_id, 'event_start_date', esc_attr( $_POST['event_start_date'] ) );
	if ( isset( $_POST['event_end_date'] ) )
		update_post_meta( $post_id, 'event_end_date', esc_attr( $_POST['event_end_date'] ) );
}
add_action( 'save_post', 'event_dates_event_dates_save' );

/*
	Usage: event_dates_get_meta( 'event_start_date' )
	Usage: event_dates_get_meta( 'event_end_date' )
*/

/*
Load Any+Time Datepicker on Event Edit/Create page.
 */
function any_time_enqueue() {
    global $typenow;
    if( $typenow == 'event_type' ) {
	wp_register_style('any_time_css', plugins_url('css/anytime/anytime.5.1.1.min.css', __FILE__));
	wp_enqueue_style('any_time_css');
	wp_register_script('any_timejs', plugins_url('js/anytime/anytime.5.1.1.min.js', __FILE__),array("jquery"));
	wp_enqueue_script('any_timejs');
	wp_register_script('any_time_settings', plugins_url('js/create-anytime.js', __FILE__));
	wp_enqueue_script('any_time_settings');
    }
}
add_action( 'admin_enqueue_scripts', 'any_time_enqueue' );


// Hook into the 'init' action
add_action( 'init', 'custom_event_type', 0 );
//Although this does get the category id from the page's shortcode, it does not allow that id to be used by the json.php despite using global variable.
//Might need to use a filter or action here. Too tired to think.
add_filter('timeline_js3_wp_shortcode', 'timeline_js3_wp_ex',10,1);
function timeline_js3_wp_ex( $atts ) {
global $post;	
// Attributes
	extract( shortcode_atts(
		array(
			'category' => '0',
			'timeline_page' => $post->ID,
		), $atts )
	);
update_option('_timeline_js3_category', $category);
update_option('_timeline_js3_page', $timeline_page);
$plugins_url = plugins_url();
return '<div id="timeline"></div>';
}
add_shortcode( 'timeline_js3_wp', 'timeline_js3_wp_ex' );
?>
